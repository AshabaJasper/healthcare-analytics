{
  "version": 3,
  "sources": ["../../../app/routes/metrics-debug.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\metrics-debug.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\metrics-debug.tsx\");\n  import.meta.hot.lastModified = \"1742375970543.47\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { prisma } from \"~/lib/prisma.server\";\nimport Layout from \"~/components/Layout\";\nimport { calculateMetricsForLOC } from \"~/services/metricsService.server\";\nexport async function loader({\n  request\n}) {\n  // Get a sample of claim records\n  const claimSample = await prisma.claimRecord.findMany({\n    take: 5\n  });\n\n  // Get all LOC values\n  const locGroups = await prisma.claimRecord.groupBy({\n    by: ['LOC'],\n    where: {\n      LOC: {\n        not: null\n      }\n    }\n  });\n\n  // For each LOC, manually calculate metrics\n  const metrics = [];\n  for (const locGroup of locGroups) {\n    if (!locGroup.LOC) continue;\n    try {\n      const metric = await calculateMetricsForLOC(locGroup.LOC, {});\n      metrics.push({\n        LOC: locGroup.LOC,\n        data: metric\n      });\n    } catch (error) {\n      metrics.push({\n        LOC: locGroup.LOC,\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  }\n\n  // Get breakdown of records per LOC\n  const locBreakdown = await prisma.claimRecord.groupBy({\n    by: ['LOC'],\n    _count: {\n      id: true\n    }\n  });\n  return json({\n    claimSample,\n    metrics,\n    locGroups: locGroups.map(g => g.LOC),\n    locBreakdown\n  });\n}\nexport default function MetricsDebug() {\n  _s();\n  const {\n    claimSample,\n    metrics,\n    locGroups,\n    locBreakdown\n  } = useLoaderData();\n  return <Layout>\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">Metrics Debug Page</h1>\r\n        \r\n        <div className=\"grid grid-cols-1 gap-6\">\r\n          {/* LOC Distribution */}\r\n          <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">LOC Distribution</h2>\r\n            <table className=\"min-w-full divide-y divide-gray-200\">\r\n              <thead className=\"bg-gray-50\">\r\n                <tr>\r\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">LOC</th>\r\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Record Count</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                {locBreakdown.map(item => <tr key={item.LOC}>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">{item.LOC}</td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{item._count.id}</td>\r\n                  </tr>)}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          \r\n          {/* Sample Claims */}\r\n          <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Sample Claim Records</h2>\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">ID</th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">LOC</th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Payer</th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Allowed Amount</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  {claimSample.map(claim => <tr key={claim.id}>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{claim.id}</td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{claim.LOC}</td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{claim.payerName}</td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">${claim.paymentAllowedAmount?.toFixed(2) || 'N/A'}</td>\r\n                    </tr>)}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Calculated Metrics */}\r\n          <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Calculated Metrics</h2>\r\n            {metrics.map(metric => <div key={metric.LOC} className=\"mb-6 last:mb-0\">\r\n                <h3 className=\"text-lg font-medium text-gray-800 mb-2\">LOC: {metric.LOC}</h3>\r\n                {metric.error ? <div className=\"p-4 bg-red-50 text-red-700 rounded-md\">\r\n                    <p>Error: {metric.error}</p>\r\n                  </div> : <div className=\"overflow-x-auto\">\r\n                    <table className=\"min-w-full divide-y divide-gray-200\">\r\n                      <thead className=\"bg-gray-50\">\r\n                        <tr>\r\n                          <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Metric</th>\r\n                          <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Value</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                        <tr>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Count</td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{metric.data.countOfObservation}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Average Allowed Amount</td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">${metric.data.averageAllowedAmount?.toFixed(2) || 'N/A'}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Min Allowed Amount</td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">${metric.data.minAllowedAmount?.toFixed(2) || 'N/A'}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Max Allowed Amount</td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">${metric.data.maxAllowedAmount?.toFixed(2) || 'N/A'}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Median Allowed Amount</td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">${metric.data.medianAllowedAmount?.toFixed(2) || 'N/A'}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>}\r\n              </div>)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>;\n}\n_s(MetricsDebug, \"wZ9n9v7H/FkTtcRh0AIj1kj3z2Y=\", false, function () {\n  return [useLoaderData];\n});\n_c = MetricsDebug;\nvar _c;\n$RefreshReg$(_c, \"MetricsDebug\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
