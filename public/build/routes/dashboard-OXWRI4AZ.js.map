{
  "version": 3,
  "sources": ["../../../app/routes/dashboard.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\dashboard.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\dashboard.tsx\");\n  import.meta.hot.lastModified = \"1742542060661.8645\";\n}\n// REMIX HMR END\n\nimport { useState, useEffect } from \"react\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, Link, useNavigation } from \"@remix-run/react\";\nimport Layout from \"~/components/Layout\";\nimport StatsCard from \"~/components/StatsCard\";\nimport DashboardFilters from \"~/components/DashboardFilters\";\nimport MetricsChart from \"~/components/MetricsChart\";\nimport RevenueProjection from \"~/components/RevenueProjection\";\nimport { getDashboardStats, getFilterOptions, getAllClaimData } from \"~/services/dataService.server\";\nimport { formatCurrency } from \"~/utils/dataUtils\";\nimport { checkMetricsStatus, calculateAndStoreAllMetrics } from \"~/services/metricsService.server\";\nexport const meta = () => {\n  return [{\n    title: \"Dashboard - Healthcare Analytics\"\n  }, {\n    name: \"description\",\n    content: \"Healthcare data analytics dashboard\"\n  }];\n};\nexport async function loader({\n  request\n}) {\n  console.log(\"Loading dashboard data...\");\n\n  // Check if metrics need to be calculated\n  const metricsStatus = await checkMetricsStatus();\n\n  // Auto-calculate if needed\n  let calculationResult = null;\n  if (metricsStatus.needsCalculation) {\n    try {\n      console.log(\"Auto-calculating metrics...\");\n      const count = await calculateAndStoreAllMetrics();\n      calculationResult = {\n        success: true,\n        count,\n        message: `Auto-calculated metrics for ${count} LOC groups.`\n      };\n      console.log(`Auto-calculated metrics for ${count} LOC groups`);\n    } catch (error) {\n      console.error(\"Error auto-calculating metrics:\", error);\n      calculationResult = {\n        success: false,\n        message: `Error calculating metrics: ${error instanceof Error ? error.message : \"Unknown error\"}`\n      };\n    }\n  }\n\n  // Load all data required for the dashboard\n  const [dashboardStats, filterOptions, allClaimData] = await Promise.all([getDashboardStats(), getFilterOptions(), getAllClaimData()]);\n\n  // Log filter options to help with debugging\n  console.log(\"Filter options loaded:\", {\n    levelOfCare: filterOptions.levelOfCare?.length || 0,\n    payer: filterOptions.payer?.length || 0,\n    payerClass: filterOptions.payerClass?.length || 0,\n    stateTreatedAt: filterOptions.stateTreatedAt?.length || 0,\n    serviceYears: filterOptions.serviceYears?.length || 0,\n    paymentYears: filterOptions.paymentYears?.length || 0\n  });\n  return json({\n    dashboardStats,\n    metricsStatus,\n    calculationResult,\n    filterOptions,\n    allClaimData\n  });\n}\nexport default function Dashboard() {\n  _s();\n  const {\n    dashboardStats,\n    metricsStatus,\n    calculationResult,\n    filterOptions,\n    allClaimData\n  } = useLoaderData();\n  const navigation = useNavigation();\n  const isLoading = navigation.state === \"loading\";\n\n  // Define filter state that matches the DashboardFilters component\n  const [currentFilters, setCurrentFilters] = useState({\n    levelOfCare: null,\n    payer: null,\n    payerClass: null,\n    stateTreatedAt: null,\n    serviceYear: null,\n    paymentYear: null\n  });\n  const [filteredClaimData, setFilteredClaimData] = useState(allClaimData || []);\n\n  // Format the metrics data for MetricsChart\n  const metricsData = dashboardStats.locMetrics.map(metric => ({\n    LOC: metric.LOC,\n    averageAllowedAmount: metric.averageAllowedAmount,\n    minAllowedAmount: metric.minAllowedAmount,\n    maxAllowedAmount: metric.maxAllowedAmount,\n    medianAllowedAmount: metric.medianAllowedAmount,\n    modeAllowedAmount: metric.modeAllowedAmount || metric.averageAllowedAmount // fallback\n  }));\n\n  // Callback when a filter is changed by the user\n  const handleFilterChange = (name, value) => {\n    console.log(`Filter changed: ${name} = ${value}`);\n    setCurrentFilters(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Apply filters whenever currentFilters or claim data change\n  useEffect(() => {\n    if (!allClaimData || allClaimData.length === 0) {\n      console.log(\"No claim data available for filtering\");\n      return;\n    }\n    console.log(\"Applying filters:\", currentFilters);\n    let filtered = [...allClaimData];\n\n    // Filter by levelOfCare (maps to LOC in database)\n    if (currentFilters.levelOfCare) {\n      filtered = filtered.filter(claim => claim.levelOfCare === currentFilters.levelOfCare);\n      console.log(`After levelOfCare filter: ${filtered.length} records`);\n    }\n\n    // Filter by payer (maps to payerName in database)\n    if (currentFilters.payer) {\n      filtered = filtered.filter(claim => claim.payer === currentFilters.payer);\n      console.log(`After payer filter: ${filtered.length} records`);\n    }\n\n    // Filter by payerClass (maps to payerGroup in database)\n    if (currentFilters.payerClass) {\n      filtered = filtered.filter(claim => claim.payerClass === currentFilters.payerClass);\n      console.log(`After payerClass filter: ${filtered.length} records`);\n    }\n\n    // Filter by stateTreatedAt (maps to primaryInsState in database)\n    if (currentFilters.stateTreatedAt) {\n      filtered = filtered.filter(claim => claim.stateTreatedAt === currentFilters.stateTreatedAt);\n      console.log(`After stateTreatedAt filter: ${filtered.length} records`);\n    }\n\n    // Filter by serviceYear \n    if (currentFilters.serviceYear !== null) {\n      filtered = filtered.filter(claim => claim.serviceYear === currentFilters.serviceYear);\n      console.log(`After serviceYear filter: ${filtered.length} records`);\n    }\n\n    // Filter by paymentYear\n    if (currentFilters.paymentYear !== null) {\n      filtered = filtered.filter(claim => claim.paymentYear === currentFilters.paymentYear);\n      console.log(`After paymentYear filter: ${filtered.length} records`);\n    }\n    console.log(`Final filtered data: ${filtered.length} records`);\n    setFilteredClaimData(filtered);\n  }, [allClaimData, currentFilters]);\n  return <Layout>\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold text-gray-900\">Analytics Dashboard</h1>\r\n            <p className=\"mt-2 text-gray-600\">\r\n              Overview of key metrics and revenue projections from your healthcare data.\r\n            </p>\r\n          </div>\r\n          \r\n          {/* Metrics calculation status */}\r\n          {(isLoading || calculationResult) && <div className=\"flex items-center\">\r\n              {isLoading ? <div className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600\">\r\n                  <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                  </svg>\r\n                  Loading metrics...\r\n                </div> : calculationResult && <div className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md ${calculationResult.success ? 'text-green-800 bg-green-100' : 'text-red-800 bg-red-100'}`}>\r\n                  {calculationResult.success ? <svg className=\"h-5 w-5 mr-2 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\r\n                    </svg> : <svg className=\"h-5 w-5 mr-2 text-red-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n                    </svg>}\r\n                  {calculationResult.success ? \"Metrics calculated\" : \"Calculation error\"}\r\n                </div>}\r\n            </div>}\r\n        </div>\r\n\r\n        {/* Dashboard Filters - only render if we have filter options */}\r\n        {filterOptions && Object.keys(filterOptions).length > 0 && <DashboardFilters filterOptions={filterOptions} currentFilters={currentFilters} onFilterChange={handleFilterChange} />}\r\n\r\n        {/* Summary Stats Cards */}\r\n        <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8\">\r\n          <StatsCard title=\"Total Records\" value={dashboardStats.totalRecords.toLocaleString()} description=\"Total number of claims\" icon={<svg className=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n              </svg>} />\r\n          <StatsCard title=\"Unique Patients\" value={dashboardStats.uniquePatients.toLocaleString()} description=\"Distinct patient count\" icon={<svg className=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\r\n              </svg>} />\r\n          <StatsCard title=\"Total Payments\" value={formatCurrency(dashboardStats.totalPayments)} description=\"Sum of all payments\" icon={<svg className=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n              </svg>} />\r\n          <StatsCard title=\"Average Allowed Amount\" value={formatCurrency(dashboardStats.totalAllowed / dashboardStats.totalRecords)} description=\"Average allowed per claim\" icon={<svg className=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n              </svg>} />\r\n        </div>\r\n\r\n        {/* Metrics Chart */}\r\n        <div className=\"mb-8 bg-white rounded-lg shadow p-6\">\r\n          <MetricsChart data={metricsData} title=\"Amount Metrics by Level of Care\" />\r\n        </div>\r\n\r\n        {/* Revenue Projection */}\r\n        <div className=\"mb-8\">\r\n          <RevenueProjection metrics={dashboardStats.locMetrics.map(metric => ({\n          LOC: metric.LOC,\n          averageAllowedAmount: metric.averageAllowedAmount,\n          minAllowedAmount: metric.minAllowedAmount,\n          maxAllowedAmount: metric.maxAllowedAmount,\n          medianAllowedAmount: metric.medianAllowedAmount,\n          modeAllowedAmount: metric.modeAllowedAmount || metric.averageAllowedAmount,\n          countOfObservation: metric.countOfObservation\n        }))} />\r\n        </div>\r\n\r\n        {/* LOC Breakdown */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\r\n          <div className=\"bg-white rounded-lg shadow\">\r\n            <div className=\"px-4 py-5 sm:px-6 border-b border-gray-200\">\r\n              <h3 className=\"text-lg font-medium text-gray-900\">Level of Care Breakdown</h3>\r\n              <p className=\"mt-1 text-sm text-gray-500\">\r\n                Distribution of records by level of care\r\n              </p>\r\n            </div>\r\n            <div className=\"px-4 py-5 sm:p-6\">\r\n              <div className=\"overflow-x-auto\">\r\n                <table className=\"min-w-full divide-y divide-gray-200\">\r\n                  <thead className=\"bg-gray-50\">\r\n                    <tr>\r\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Level of Care</th>\r\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Count</th>\r\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Percentage</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                    {dashboardStats.locBreakdown.map(item => <tr key={item.LOC}>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                          <Link to={`/dashboard/${item.LOC}`} className=\"text-primary-600 hover:underline\">{item.LOC}</Link>\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{item._count.id}</td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                          {(item._count.id / dashboardStats.totalRecords * 100).toFixed(1)}%\r\n                        </td>\r\n                      </tr>)}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Payer Distribution */}\r\n          <div className=\"bg-white rounded-lg shadow\">\r\n            <div className=\"px-4 py-5 sm:px-6 border-b border-gray-200\">\r\n              <h3 className=\"text-lg font-medium text-gray-900\">Payer Distribution</h3>\r\n              <p className=\"mt-1 text-sm text-gray-500\">Top payers by number of claims</p>\r\n            </div>\r\n            <div className=\"px-4 py-5 sm:p-6\">\r\n              {filteredClaimData.length > 0 ? <div className=\"text-center text-gray-500\">\r\n                  Payer Distribution Chart Removed\r\n                </div> : <div className=\"h-64 flex items-center justify-center\">\r\n                  <p className=\"text-gray-500\">No data available</p>\r\n                </div>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>;\n}\n_s(Dashboard, \"qWFnWLhvichAsGbDvTkDaeQX7CQ=\", false, function () {\n  return [useLoaderData, useNavigation];\n});\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
