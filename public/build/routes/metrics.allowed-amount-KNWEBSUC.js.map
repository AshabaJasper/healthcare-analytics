{
  "version": 3,
  "sources": ["../../../app/routes/metrics.allowed-amount.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\metrics.allowed-amount.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\metrics.allowed-amount.tsx\");\n  import.meta.hot.lastModified = \"1742743927845.5366\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport Layout from \"~/components/Layout\";\nimport DashboardFilters from \"~/components/DashboardFilters\";\nimport { prisma } from \"~/lib/prisma.server\";\nimport { getFilterOptions } from \"~/services/dataService.server\";\nexport const meta = () => {\n  return [{\n    title: \"Allowed Amount Metrics - Healthcare Analytics\"\n  }, {\n    name: \"description\",\n    content: \"View allowed amount metrics by payer class and LOC\"\n  }];\n};\nexport async function loader({\n  request\n}) {\n  try {\n    // Get URL params for filtering\n    const url = new URL(request.url);\n    const loc = url.searchParams.get(\"levelOfCare\");\n    const payer = url.searchParams.get(\"payer\");\n    const payerClass = url.searchParams.get(\"payerClass\");\n    const stateTreatedAt = url.searchParams.get(\"stateTreatedAt\");\n    const serviceYear = url.searchParams.get(\"serviceYear\") ? parseInt(url.searchParams.get(\"serviceYear\")) : null;\n    const paymentYear = url.searchParams.get(\"paymentYear\") ? parseInt(url.searchParams.get(\"paymentYear\")) : null;\n\n    // Build where clause for the query\n    const where = {};\n    if (loc) {\n      where.LOC = loc;\n    }\n    if (payer) {\n      where.payerName = payer;\n    }\n    if (payerClass) {\n      where.payerClass = payerClass;\n    }\n    if (stateTreatedAt) {\n      where.stateTreatedAt = stateTreatedAt;\n    }\n    if (serviceYear) {\n      where.dateOfServiceYear = serviceYear;\n    }\n    if (paymentYear) {\n      where.paymentReceivedYear = paymentYear;\n    }\n\n    // Query metrics from the database\n    const metrics = await prisma.calculatedMetrics.findMany({\n      where,\n      select: {\n        id: true,\n        LOC: true,\n        countOfObservation: true,\n        averageAllowedAmount: true,\n        minAllowedAmount: true,\n        maxAllowedAmount: true,\n        medianAllowedAmount: true,\n        modeAllowedAmount: true,\n        payerClass: true,\n        payerName: true,\n        stateTreatedAt: true\n      },\n      orderBy: [{\n        payerClass: 'asc'\n      }, {\n        LOC: 'asc'\n      }]\n    });\n\n    // Get filter options for the dashboard filters\n    const filterOptions = await getFilterOptions();\n    return json({\n      metrics,\n      filterOptions\n    });\n  } catch (error) {\n    console.error(\"Error loading allowed amount metrics:\", error);\n    return json({\n      metrics: [],\n      filterOptions: {\n        levelOfCare: [],\n        payer: [],\n        payerClass: [],\n        stateTreatedAt: [],\n        serviceYears: [],\n        paymentYears: []\n      }\n    });\n  }\n}\nexport default function AllowedAmountMetrics() {\n  _s();\n  const {\n    metrics,\n    filterOptions\n  } = useLoaderData();\n\n  // Define filter state that matches the DashboardFilters component\n  const [currentFilters, setCurrentFilters] = useState({\n    levelOfCare: null,\n    payer: null,\n    payerClass: null,\n    stateTreatedAt: null,\n    serviceYear: null,\n    paymentYear: null\n  });\n\n  // Callback when a filter is changed by the user\n  const handleFilterChange = (name, value) => {\n    console.log(`Filter changed: ${name} = ${value}`);\n    setCurrentFilters(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Here we would typically update the URL to reflect the filter changes\n    // This would trigger a reload of the page with the new filters applied\n    const url = new URL(window.location.href);\n    if (value === null) {\n      url.searchParams.delete(name);\n    } else {\n      url.searchParams.set(name, String(value));\n    }\n\n    // Update browser URL without reloading the page\n    window.history.pushState({}, '', url);\n\n    // Force reload to apply filters from the server\n    window.location.href = url.toString();\n  };\n  return <Layout>\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        <div className=\"mb-6\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Allowed Amount Metrics</h1>\r\n          <p className=\"mt-2 text-gray-600\">\r\n            View detailed allowed amount metrics organized by payer class and level of care\r\n          </p>\r\n        </div>\r\n        \r\n        {/* Dashboard Filters */}\r\n        <div className=\"print:hidden\">\r\n          {filterOptions && Object.keys(filterOptions).length > 0 && <DashboardFilters filterOptions={filterOptions} currentFilters={currentFilters} onFilterChange={handleFilterChange} />}\r\n        </div>\r\n        \r\n        {/* Metrics Table */}\r\n        <div className=\"mb-8\">\r\n          <ProjectAllowedAmount metrics={metrics} />\r\n        </div>\r\n      </div>\r\n    </Layout>;\n}\n_s(AllowedAmountMetrics, \"CicPx6oFxKIHMf53CcVJAhG/msc=\", false, function () {\n  return [useLoaderData];\n});\n_c = AllowedAmountMetrics;\nvar _c;\n$RefreshReg$(_c, \"AllowedAmountMetrics\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAyB;AACzB,kBAAqB;AAIrB,oBAAuB;AACvB,yBAAiC;AAkIvB;AA5JV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kDAAoD,EAAE;AAAA,EAC/F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAyC;AACzC,cAAY,IAAI,eAAe;AACjC;AAUO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AACH;AA+Ee,SAAR,uBAAwC;AAC7C,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,cAAc;AAGlB,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,uBAAS;AAAA,IACnD,aAAa;AAAA,IACb,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,aAAa;AAAA,IACb,aAAa;AAAA,EACf,CAAC;AAGD,QAAM,qBAAqB,CAAC,MAAM,UAAU;AAC1C,YAAQ,IAAI,mBAAmB,UAAU,OAAO;AAChD,sBAAkB,WAAS;AAAA,MACzB,GAAG;AAAA,MACH,CAAC,IAAI,GAAG;AAAA,IACV,EAAE;AAIF,UAAM,MAAM,IAAI,IAAI,OAAO,SAAS,IAAI;AACxC,QAAI,UAAU,MAAM;AAClB,UAAI,aAAa,OAAO,IAAI;AAAA,IAC9B,OAAO;AACL,UAAI,aAAa,IAAI,MAAM,OAAO,KAAK,CAAC;AAAA,IAC1C;AAGA,WAAO,QAAQ,UAAU,CAAC,GAAG,IAAI,GAAG;AAGpC,WAAO,SAAS,OAAO,IAAI,SAAS;AAAA,EACtC;AACA,SAAO,mDAAC,UACJ,6DAAC,SAAI,WAAU,qBACb;AAAA,uDAAC,SAAI,WAAU,QACb;AAAA,yDAAC,QAAG,WAAU,oCAAmC,sCAAjD;AAAA;AAAA;AAAA;AAAA,aAAuE;AAAA,MACvE,mDAAC,OAAE,WAAU,sBAAqB,+FAAlC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IAGA,mDAAC,SAAI,WAAU,gBACZ,2BAAiB,OAAO,KAAK,aAAa,EAAE,SAAS,KAAK,mDAAC,oBAAiB,eAA8B,gBAAgC,gBAAgB,sBAAhG;AAAA;AAAA;AAAA;AAAA,WAAoH,KADjL;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAGA,mDAAC,SAAI,WAAU,QACb,6DAAC,wBAAqB,WAAtB;AAAA;AAAA;AAAA;AAAA,WAAwC,KAD1C;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAhBF;AAAA;AAAA;AAAA;AAAA,SAiBA,KAlBG;AAAA;AAAA;AAAA;AAAA,SAmBL;AACJ;AACA,GAAG,sBAAsB,gCAAgC,OAAO,WAAY;AAC1E,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,sBAAsB;AAEvC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
